{
  "name": "Dotfiles Health Monitor",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 24,
              "triggerAtHour": 9
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Daily at 9AM",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [250, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.github.com/repos/dvakatsiienko/.dotfiles/commits",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "since",
              "value": "={{ $now.minus({ days: 1 }).toISO() }}"
            },
            {
              "name": "per_page",
              "value": "50"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.github.v3+json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.githubToken }}"
            }
          ]
        },
        "options": {}
      },
      "id": "github-api",
      "name": "Get Recent Commits",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process GitHub commits and create email content\nconst commits = $input.all();\nconst criticalFiles = ['.zshrc', '.gitconfig', '.vimrc', 'install-dotfiles.mjs', 'install-macos.mjs'];\n\nlet commitCount = 0;\nlet criticalChanges = [];\nlet allChanges = [];\n\nfor (const item of commits) {\n  const commit = item.json;\n  commitCount++;\n  \n  const message = commit.commit.message;\n  const author = commit.commit.author.name;\n  const date = new Date(commit.commit.author.date).toLocaleString();\n  const sha = commit.sha.substring(0, 7);\n  \n  allChanges.push({\n    sha,\n    message,\n    author,\n    date,\n    url: commit.html_url\n  });\n  \n  // Check if this commit touches critical files\n  // Note: In production, you'd make another API call to get the files changed\n  // For simplicity, we'll check if critical files are mentioned in commit message\n  for (const file of criticalFiles) {\n    if (message.toLowerCase().includes(file.toLowerCase())) {\n      criticalChanges.push({\n        file,\n        commit: sha,\n        message\n      });\n    }\n  }\n}\n\n// Generate HTML email content\nlet emailHtml = `\n<html>\n<head>\n  <style>\n    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px 10px 0 0; }\n    .content { background: #f9f9f9; padding: 20px; border-radius: 0 0 10px 10px; }\n    .stat-box { display: inline-block; background: white; padding: 10px 20px; margin: 10px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n    .commit { background: white; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 3px solid #667eea; }\n    .critical { border-left-color: #ff6b6b; }\n    .link { color: #667eea; text-decoration: none; }\n    .emoji { font-size: 1.2em; margin-right: 5px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1><span class=\"emoji\">üîß</span>Dotfiles Daily Report</h1>\n      <p style=\"margin: 0; opacity: 0.9;\">${new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>\n    </div>\n    <div class=\"content\">\n`;\n\nif (commitCount === 0) {\n  emailHtml += `\n      <p><span class=\"emoji\">‚ú®</span><strong>No changes in the last 24 hours!</strong></p>\n      <p>Your dotfiles are stable. No commits were made to the repository.</p>\n  `;\n} else {\n  emailHtml += `\n      <div style=\"text-align: center; margin: 20px 0;\">\n        <div class=\"stat-box\">\n          <div style=\"font-size: 2em; font-weight: bold; color: #667eea;\">${commitCount}</div>\n          <div style=\"color: #666;\">Total Commits</div>\n        </div>\n        <div class=\"stat-box\">\n          <div style=\"font-size: 2em; font-weight: bold; color: ${criticalChanges.length > 0 ? '#ff6b6b' : '#4CAF50'};\">${criticalChanges.length}</div>\n          <div style=\"color: #666;\">Critical Changes</div>\n        </div>\n      </div>\n  `;\n  \n  if (criticalChanges.length > 0) {\n    emailHtml += `\n      <h2><span class=\"emoji\">‚ö†Ô∏è</span>Critical File Changes</h2>\n      <p>The following critical configuration files were modified:</p>\n    `;\n    for (const change of criticalChanges) {\n      emailHtml += `\n        <div class=\"commit critical\">\n          <strong>${change.file}</strong> - ${change.message} (${change.commit})\n        </div>\n      `;\n    }\n  }\n  \n  emailHtml += `\n      <h2><span class=\"emoji\">üìù</span>Recent Commits</h2>\n  `;\n  \n  for (const change of allChanges.slice(0, 5)) {\n    emailHtml += `\n      <div class=\"commit\">\n        <div><strong>${change.message}</strong></div>\n        <div style=\"color: #666; font-size: 0.9em; margin-top: 5px;\">\n          <span class=\"emoji\">üë§</span>${change.author} ‚Ä¢ \n          <span class=\"emoji\">üïê</span>${change.date} ‚Ä¢ \n          <a href=\"${change.url}\" class=\"link\">${change.sha}</a>\n        </div>\n      </div>\n    `;\n  }\n  \n  if (allChanges.length > 5) {\n    emailHtml += `\n      <p style=\"text-align: center; color: #666; margin-top: 20px;\">\n        <em>...and ${allChanges.length - 5} more commits</em>\n      </p>\n    `;\n  }\n}\n\nemailHtml += `\n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #666; font-size: 0.9em;\">\n        <p><span class=\"emoji\">ü§ñ</span>Automated report generated by n8n workflow</p>\n        <p><a href=\"https://github.com/dvakatsiienko/.dotfiles\" class=\"link\">View Repository</a></p>\n      </div>\n    </div>\n  </div>\n</body>\n</html>\n`;\n\nconst emailText = commitCount === 0 \n  ? 'No changes in your dotfiles repository in the last 24 hours.'\n  : `${commitCount} commits made to your dotfiles. ${criticalChanges.length} critical file changes detected.`;\n\nreturn {\n  json: {\n    subject: `üîß Dotfiles Daily Report - ${commitCount} changes`,\n    html: emailHtml,\n    text: emailText,\n    commitCount,\n    criticalChanges: criticalChanges.length,\n    hasChanges: commitCount > 0\n  }\n};"
      },
      "id": "process-commits",
      "name": "Process Commits",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "sendTo": "your-email@example.com",
        "subject": "={{ $json.subject }}",
        "emailType": "html",
        "message": "={{ $json.html }}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "send-email",
      "name": "Send Email Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [850, 300],
      "credentials": {
        "smtp": {
          "id": "1",
          "name": "SMTP"
        }
      }
    }
  ],
  "connections": {
    "Daily at 9AM": {
      "main": [
        [
          {
            "node": "Get Recent Commits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Recent Commits": {
      "main": [
        [
          {
            "node": "Process Commits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Commits": {
      "main": [
        [
          {
            "node": "Send Email Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "instanceId": "dotfiles-monitor"
  },
  "tags": [],
  "pinData": {},
  "versionId": "1.0.0"
}